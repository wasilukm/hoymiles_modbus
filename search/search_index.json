{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hoymiles_modbus","title":"hoymiles_modbus","text":"<p>Python library for gathering data from Hoymiles inverters.</p> <p>The library communicates with Hoymiles DTU (Pro and Pro-S are supported) which is a proxy/monitoring device for inverters. DTU should be connected via its <code>Ethernet</code> port and should have IP address assigned by DHCP server.</p> <p>Disclaimer: This is an independent project, not affiliated with Hoymiles. Any trademarks or product names mentioned are the property of their respective owners.</p> <ul> <li>Documentation: https://wasilukm.github.io/hoymiles_modbus</li> <li>GitHub: https://github.com/wasilukm/hoymiles_modbus</li> <li>PyPI: https://pypi.org/project/hoymiles_modbus/</li> <li>Free software: MIT</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Communication via Modbus TCP</li> <li>Decode all inverter status registers, which include information such as:</li> <li>current production</li> <li>total production</li> <li>today production</li> <li>temperature</li> <li>alarms</li> <li>status</li> <li>grid voltage and frequency</li> </ul>"},{"location":"#applications","title":"Applications","text":"<p>This library is for creating higher-level applications such as Home Assistant integration</p>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.</p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for hoymiles_modbus.</p>"},{"location":"api/#hoymiles_modbus.client","title":"<code>client</code>","text":"<p>Hoymiles Modbus client.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP","title":"<code>HoymilesModbusTCP(host, port=502, unit_id=1)</code>","text":"<p>Hoymiles Modbus TCP client.</p> <p>Gather data from photovoltaic installation based on Hoymiles inverters managed by Hoymiles DTU (like DTU-pro). The client communicates with DTU via Modbus TCP protocol.</p> <p>Initialize the object.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>DTU address</p> required <code>port</code> <code>int</code> <p>target DTU modbus TCP port</p> <code>502</code> <code>unit_id</code> <code>int</code> <p>Modbus unit ID</p> <code>1</code> Source code in <code>hoymiles_modbus/client.py</code> <pre><code>def __init__(self, host: str, port: int = 502, unit_id: int = 1) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Arguments:\n        host: DTU address\n        port: target DTU modbus TCP port\n        unit_id: Modbus unit ID\n\n    \"\"\"\n    self._host: str = host\n    self._port: int = port\n    self._dtu_serial_number: str = ''\n    self._unit_id = unit_id\n    self._comm_params: 'CommunicationParams' = CommunicationParams()\n</code></pre>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.comm_params","title":"<code>comm_params: CommunicationParams</code>  <code>property</code>","text":"<p>Low level communication parameters.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.dtu","title":"<code>dtu: str</code>  <code>property</code>","text":"<p>DTU serial number.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.inverters","title":"<code>inverters: list[InverterData]</code>  <code>property</code>","text":"<p>Status data from all inverters.</p> <p>Each <code>get</code> is a new request and data from the installation.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.plant_data","title":"<code>plant_data: PlantData</code>  <code>property</code>","text":"<p>Plant status data.</p> <p>Each <code>get</code> is a new request and data from the installation.</p>"},{"location":"api/#hoymiles_modbus.datatypes","title":"<code>datatypes</code>","text":"<p>Data structures.</p>"},{"location":"api/#hoymiles_modbus.datatypes.CommunicationParams","title":"<code>CommunicationParams(timeout=3, retries=3, reconnect_delay=0, reconnect_delay_max=300)</code>  <code>dataclass</code>","text":"<p>Low level pymodbus communication parameters.</p>"},{"location":"api/#hoymiles_modbus.datatypes.CommunicationParams.reconnect_delay","title":"<code>reconnect_delay: float = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Minimum delay in seconds.milliseconds before reconnecting. Doubles automatically with each unsuccessful connect, from reconnect_delay to reconnect_delay_max.</p> <p>Default is 0 which means that reconnecting is disabled.</p>"},{"location":"api/#hoymiles_modbus.datatypes.CommunicationParams.reconnect_delay_max","title":"<code>reconnect_delay_max: float = 300</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum delay in seconds.milliseconds before reconnecting.</p>"},{"location":"api/#hoymiles_modbus.datatypes.CommunicationParams.retries","title":"<code>retries: int = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Max number of retries per request.</p>"},{"location":"api/#hoymiles_modbus.datatypes.CommunicationParams.timeout","title":"<code>timeout: float = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for a connection request, in seconds.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData","title":"<code>InverterData</code>","text":"<p>               Bases: <code>Structure</code></p> <p>Inverter data structure.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.alarm_code","title":"<code>alarm_code: int = member(fmt=uint16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alarm code.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.alarm_count","title":"<code>alarm_count: int = member(fmt=uint16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alarm count.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.grid_frequency","title":"<code>grid_frequency: Decimal = member(fmt=_udec16p2)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grid frequency [Hz].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.grid_voltage","title":"<code>grid_voltage: Decimal = member(fmt=_udec16p1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grid voltage [V].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.link_status","title":"<code>link_status: int = member(fmt=uint8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Link status.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.operating_status","title":"<code>operating_status: int = member(fmt=uint16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Operating status.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.port_number","title":"<code>port_number: int = member(fmt=uint8)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Port number.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.pv_current","title":"<code>pv_current: Decimal = member(fmt=_pv_current_type, fmt_arg=serial_number)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PV current [A].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.pv_power","title":"<code>pv_power: Decimal = member(fmt=_udec16p1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PV power [W].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.pv_voltage","title":"<code>pv_voltage: Decimal = member(fmt=_udec16p1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PV voltage [V].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.serial_number","title":"<code>serial_number: str = member(fmt=_serial_number_t)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Inverter serial number.</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.temperature","title":"<code>temperature: Decimal = member(fmt=_sdec16p1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Inverter temperature [\u00b0C].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.today_production","title":"<code>today_production: int = member(fmt=uint16)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Today production [Wh].</p>"},{"location":"api/#hoymiles_modbus.datatypes.InverterData.total_production","title":"<code>total_production: int = member(fmt=uint32)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Total production [Wh].</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData","title":"<code>PlantData(dtu, pv_power=Decimal(0), today_production=0, total_production=0, alarm_flag=False, inverters=list())</code>  <code>dataclass</code>","text":"<p>Data structure for the whole plant.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.alarm_flag","title":"<code>alarm_flag: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alarm indicator. True means that at least one inverter reported an alarm.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.dtu","title":"<code>dtu: str</code>  <code>instance-attribute</code>","text":"<p>DTU serial number.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.inverters","title":"<code>inverters: list[InverterData] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data for each inverter.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.pv_power","title":"<code>pv_power: Decimal = Decimal(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current production [W].</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.today_production","title":"<code>today_production: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Today production [Wh].</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.total_production","title":"<code>total_production: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Total production [Wh].</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#091-2025-02-16","title":"[0.9.1] (2025-02-16)","text":"<ul> <li>bump pymodbus to 3.8</li> </ul>"},{"location":"changelog/#090-2025-01-19","title":"[0.9.0] (2025-01-19)","text":"<ul> <li>add support for Python 3.13</li> <li>Change logic of inverter type detection.   By default, all inverters are treated as HM series. Only inverters with serial numbers starting with \"10\" are treated as MI series.   This should cover more inverters without updating the library for every new inverter model.   Note: the knowledge of inverter type is needed for correct decoding pv_current.</li> </ul>"},{"location":"changelog/#080-2024-12-01","title":"[0.8.0] (2024-12-01)","text":"<p>Features:  * support for automatic detection of inverter type  * exposed reconnect_delay_max connection parameter</p> <p>Breaking changes: * support for pymodbus 3.7, dropped support for older versions * <code>CommunicationParams</code> class moved to <code>hoymiles_modbus.datatypes</code> * connection parameters: <code>retry_on_empty</code>, <code>close_comm_on_error</code> and <code>strict</code> are no longer supported * removed <code>microinverter_type</code> parameter from <code>HoymilesModbusTCP</code> * data structures <code>MISeriesMicroinverterData</code> and <code>HMSeriesMicroinverterData</code> replaced by <code>InverterData</code> * renamed <code>PlantData.microinverter_data</code> to <code>PlantData.inverters</code> * renamed <code>HoymilesModbusTCP.microinverter_data</code> to <code>HoymilesModbusTCP.inverters</code></p>"},{"location":"changelog/#070-2024-08-12","title":"[0.7.0] (2024-08-12)","text":"<ul> <li>add support for Python 3.12</li> <li>BREAKING CHANGE: drop support for Python 3.8</li> </ul>"},{"location":"changelog/#063-2024-08-10","title":"[0.6.3] (2024-08-10)","text":"<ul> <li>prevent installing pymodbus 3.7 and greater which has broken backward compatibility</li> <li>don't treat modbus response as an exception, instead raise RuntimeError for negative response</li> </ul>"},{"location":"changelog/#062-2023-03-05","title":"[0.6.2] (2023-03-05)","text":"<ul> <li>only documentation changes<ul> <li>fix generating API documentation</li> <li>extend usage examples</li> </ul> </li> </ul>"},{"location":"changelog/#061-2023-02-26","title":"[0.6.1] (2023-02-26)","text":"<ul> <li>Raise RuntimeError when trying to read microinverters, but they are not added yet in DTU</li> </ul>"},{"location":"changelog/#060-2023-02-07","title":"[0.6.0] (2023-02-07)","text":"<ul> <li>add support for Python 3.10 and 3.11</li> <li>remove support for Python 3.6 and 3.7</li> </ul>"},{"location":"changelog/#050-2022-10-03","title":"[0.5.0] (2022-10-03)","text":"<ul> <li>Add support for low level pymodbus communication parameters. A user can configure additional   communication parameters via <code>HoymilesModbusTCP().comm_params</code></li> </ul>"},{"location":"changelog/#040-2022-05-07","title":"[0.4.0] (2022-05-07)","text":"<ul> <li>Add support for custom Modbus Unit ID</li> <li>Bump plum-py version</li> </ul>"},{"location":"changelog/#021-2022-04-23","title":"[0.2.1] (2022-04-23)","text":"<ul> <li>Again fix handling modbus exceptions - modbus error was   causing <code>IndexError: list assignment index out of range</code> exception</li> </ul>"},{"location":"changelog/#020-2022-03-15","title":"[0.2.0] (2022-03-15)","text":"<ul> <li>improve modbus exception handling - now when there is an error in   a response then pymodbus exception is raised</li> <li>add support for HM microinverter series - previously <code>pv_current</code>   was incorrectly interpreted for these microinverters</li> </ul>"},{"location":"changelog/#010-2022-03-12","title":"[0.1.0] (2022-03-12)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/wasilukm/hoymiles_modbus/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>hoymiles_modbus could always use more documentation, whether as part of the official hoymiles_modbus docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/wasilukm/hoymiles_modbus/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>hoymiles_modbus</code> for local development.</p> <ol> <li>Fork the <code>hoymiles_modbus</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/hoymiles_modbus.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.9, 3.10, 3.11 and 3.12. Check    https://github.com/wasilukm/hoymiles_modbus/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_hoymiles_modbus.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install hoymiles_modbus, run this command in your terminal:</p> <pre><code>$ pip install hoymiles_modbus\n</code></pre> <p>This is the preferred method to install hoymiles_modbus, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for hoymiles_modbus can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/wasilukm/hoymiles_modbus\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/wasilukm/hoymiles_modbus/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<pre><code>from hoymiles_modbus.client import HoymilesModbusTCP\n\nplant_data = HoymilesModbusTCP('1.2.3.4').plant_data\nprint(plant_data.today_production)\n</code></pre>"}]}