{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hoymiles_modbus","title":"hoymiles_modbus","text":"<p>Python library for gathering data from Hoymiles microinverters.</p> <p>The library communicates with Hoymiles DTU (Pro and Pro-S are supported) which is a proxy/monitoring device for microinverters. DTU should be connected via its <code>Ethernet</code> port and should have IP address assigned by DHCP server.</p> <ul> <li>Documentation: https://wasilukm.github.io/hoymiles_modbus</li> <li>GitHub: https://github.com/wasilukm/hoymiles_modbus</li> <li>PyPI: https://pypi.org/project/hoymiles_modbus/</li> <li>Free software: MIT</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Communication via Modbus TCP</li> <li>Decode all microinverter status registers, which include information such as:</li> <li>current production</li> <li>total production</li> <li>today production</li> <li>temperature</li> <li>alarms</li> <li>status</li> <li>grid voltage and frequency</li> </ul>"},{"location":"#applications","title":"Applications","text":"<p>This library is for creating higher-level applications. If you are looking for such, check the following:</p> <ul> <li>Home Assistant integrations<ul> <li>integration via MQTT</li> <li>Add-on</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.</p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for hoymiles_modbus.</p>"},{"location":"api/#hoymiles_modbus.client","title":"<code>client</code>","text":"<p>Hoymiles Modbus client.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams","title":"<code>CommunicationParams(timeout=3, retries=3, retry_on_empty=False, close_comm_on_error=False, strict=True, reconnect_delay=60000 * 5)</code>  <code>dataclass</code>","text":"<p>Low level pymodbus communication parameters.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.close_comm_on_error","title":"<code>close_comm_on_error: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Close connection on error</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.reconnect_delay","title":"<code>reconnect_delay: int = 60000 * 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Delay in milliseconds before reconnecting.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.retries","title":"<code>retries: int = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Max number of retries per request.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.retry_on_empty","title":"<code>retry_on_empty: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Retry if received an empty response.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.strict","title":"<code>strict: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Strict timing, 1.5 character between requests.</p>"},{"location":"api/#hoymiles_modbus.client.CommunicationParams.timeout","title":"<code>timeout: int = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Request timeout.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP","title":"<code>HoymilesModbusTCP(host, port=502, microinverter_type=MicroinverterType.MI, unit_id=1)</code>","text":"<p>Hoymiles Modbus TCP client.</p> <p>Gather data from photovoltaic installation based on Hoymiles microinverters managed by Hoymiles DTU (like DTU-pro). The client communicates with DTU via Modbus TCP protocol.</p> <p>Initialize the object.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>DTU address</p> required <code>port</code> <code>int</code> <p>target DTU modbus TCP port</p> <code>502</code> <code>microinverter_type</code> <code>MicroinverterType</code> <p>Microinverter type, applies to all microinverters</p> <code>MI</code> <code>unit_id</code> <code>int</code> <p>Modbus unit ID</p> <code>1</code> Source code in <code>hoymiles_modbus/client.py</code> <pre><code>def __init__(\n    self, host: str, port: int = 502, microinverter_type: MicroinverterType = MicroinverterType.MI, unit_id: int = 1\n) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Arguments:\n        host: DTU address\n        port: target DTU modbus TCP port\n        microinverter_type: Microinverter type, applies to all microinverters\n        unit_id: Modbus unit ID\n\n    \"\"\"\n    self._host: str = host\n    self._port: int = port\n    self._dtu_serial_number: str = ''\n    self._microinverter_data_struct: Type[Union[MISeriesMicroinverterData, HMSeriesMicroinverterData]]\n    if microinverter_type == MicroinverterType.MI:\n        self._microinverter_data_struct = MISeriesMicroinverterData\n    elif microinverter_type == MicroinverterType.HM:\n        self._microinverter_data_struct = HMSeriesMicroinverterData\n    else:\n        raise ValueError('Unsupported microinverter type:', microinverter_type)\n    self._unit_id = unit_id\n    self._comm_params: CommunicationParams = CommunicationParams()\n</code></pre>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.comm_params","title":"<code>comm_params: CommunicationParams</code>  <code>property</code>","text":"<p>Low level communication parameters.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.dtu","title":"<code>dtu: str</code>  <code>property</code>","text":"<p>DTU serial number.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.microinverter_data","title":"<code>microinverter_data: List[Union[MISeriesMicroinverterData, HMSeriesMicroinverterData]]</code>  <code>property</code>","text":"<p>Status data from all microinverters.</p> <p>Each <code>get</code> is a new request and data from the installation.</p>"},{"location":"api/#hoymiles_modbus.client.HoymilesModbusTCP.plant_data","title":"<code>plant_data: PlantData</code>  <code>property</code>","text":"<p>Plant status data.</p> <p>Each <code>get</code> is a new request and data from the installation.</p>"},{"location":"api/#hoymiles_modbus.datatypes","title":"<code>datatypes</code>","text":"<p>Data structures.</p>"},{"location":"api/#hoymiles_modbus.datatypes.HMSeriesMicroinverterData","title":"<code>HMSeriesMicroinverterData</code>","text":"<p>               Bases: <code>MISeriesMicroinverterData</code></p> <p>HM series microinverter status data structure.</p>"},{"location":"api/#hoymiles_modbus.datatypes.MISeriesMicroinverterData","title":"<code>MISeriesMicroinverterData</code>","text":"<p>               Bases: <code>Structure</code></p> <p>MI series microinverter status data structure.</p>"},{"location":"api/#hoymiles_modbus.datatypes.MicroinverterType","title":"<code>MicroinverterType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Microinverter type.</p>"},{"location":"api/#hoymiles_modbus.datatypes.MicroinverterType.HM","title":"<code>HM = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HM series.</p>"},{"location":"api/#hoymiles_modbus.datatypes.MicroinverterType.MI","title":"<code>MI = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MI series.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData","title":"<code>PlantData(dtu, pv_power=Decimal(0), today_production=0, total_production=0, alarm_flag=False, microinverter_data=list())</code>  <code>dataclass</code>","text":"<p>Data structure for the whole plant.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.alarm_flag","title":"<code>alarm_flag: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Alarm indicator. True means that at least one microinverter reported an alarm.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.dtu","title":"<code>dtu: str</code>  <code>instance-attribute</code>","text":"<p>DTU serial number.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.microinverter_data","title":"<code>microinverter_data: List[Union[MISeriesMicroinverterData, HMSeriesMicroinverterData]] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data for each microinverter.</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.pv_power","title":"<code>pv_power: Decimal = Decimal(0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current production [W].</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.today_production","title":"<code>today_production: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Today production [Wh].</p>"},{"location":"api/#hoymiles_modbus.datatypes.PlantData.total_production","title":"<code>total_production: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Total production [Wh].</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#070-2024-08-12","title":"[0.7.0] (2024-08-12)","text":"<ul> <li>add support for Python 3.12</li> <li>BREAKING CHANGE: drop support for Python 3.8</li> </ul>"},{"location":"changelog/#063-2024-08-10","title":"[0.6.3] (2024-08-10)","text":"<ul> <li>prevent installing pymodbus 3.7 and greater which has broken backward compatibility</li> <li>don't treat modbus response as an exception, instead raise RuntimeError for negative response</li> </ul>"},{"location":"changelog/#062-2023-03-05","title":"[0.6.2] (2023-03-05)","text":"<ul> <li>only documentation changes<ul> <li>fix generating API documentation</li> <li>extend usage examples</li> </ul> </li> </ul>"},{"location":"changelog/#061-2023-02-26","title":"[0.6.1] (2023-02-26)","text":"<ul> <li>Raise RuntimeError when trying to read microinverters, but they are not added yet in DTU</li> </ul>"},{"location":"changelog/#060-2023-02-07","title":"[0.6.0] (2023-02-07)","text":"<ul> <li>add support for Python 3.10 and 3.11</li> <li>remove support for Python 3.6 and 3.7</li> </ul>"},{"location":"changelog/#050-2022-10-03","title":"[0.5.0] (2022-10-03)","text":"<ul> <li>Add support for low level pymodbus communication parameters. A user can configure additional   communication parameters via <code>HoymilesModbusTCP().comm_params</code></li> </ul>"},{"location":"changelog/#040-2022-05-07","title":"[0.4.0] (2022-05-07)","text":"<ul> <li>Add support for custom Modbus Unit ID</li> <li>Bump plum-py version</li> </ul>"},{"location":"changelog/#021-2022-04-23","title":"[0.2.1] (2022-04-23)","text":"<ul> <li>Again fix handling modbus exceptions - modbus error was   causing <code>IndexError: list assignment index out of range</code> exception</li> </ul>"},{"location":"changelog/#020-2022-03-15","title":"[0.2.0] (2022-03-15)","text":"<ul> <li>improve modbus exception handling - now when there is an error in   a response then pymodbus exception is raised</li> <li>add support for HM microinverter series - previously <code>pv_current</code>   was incorrectly interpreted for these microinverters</li> </ul>"},{"location":"changelog/#010-2022-03-12","title":"[0.1.0] (2022-03-12)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/wasilukm/hoymiles_modbus/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>hoymiles_modbus could always use more documentation, whether as part of the official hoymiles_modbus docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/wasilukm/hoymiles_modbus/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>hoymiles_modbus</code> for local development.</p> <ol> <li>Fork the <code>hoymiles_modbus</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/hoymiles_modbus.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.9, 3.10, 3.11 and 3.12. Check    https://github.com/wasilukm/hoymiles_modbus/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_hoymiles_modbus.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install hoymiles_modbus, run this command in your terminal:</p> <pre><code>$ pip install hoymiles_modbus\n</code></pre> <p>This is the preferred method to install hoymiles_modbus, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for hoymiles_modbus can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/wasilukm/hoymiles_modbus\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/wasilukm/hoymiles_modbus/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use hoymiles_modbus in a project</p> <pre><code>from hoymiles_modbus.client import HoymilesModbusTCP\n\nplant_data = HoymilesModbusTCP('1.2.3.4').plant_data\nprint(plant_data.today_production)\n</code></pre> <p>The above example assumes <code>MI</code> inverters, for <code>HM</code> change type as below:</p> <pre><code>from hoymiles_modbus.client import HoymilesModbusTCP\nfrom hoymiles_modbus.datatypes import MicroinverterType\n\nplant_data = HoymilesModbusTCP(\n    '1.2.3.4', microinverter_type=MicroinverterType.HM).plant_data\nprint(plant_data.today_production)\n</code></pre>"}]}